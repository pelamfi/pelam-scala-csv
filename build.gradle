apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'maven'

if (Boolean.valueOf(signArtifacts)) {
    println "Artifact signing is on."
    apply plugin: 'signing'
}

group = 'fi.pelam'
version = '1.3.0'
description = """
Scala library for reading and writing CSV data with an optional high level
API. Supports structured access to tabular data and a form of CSV format detection.
"""

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    deployerJars
}

if (Boolean.valueOf(signArtifacts)) {
    signing {
        sign configurations.archives
    }
}

// http://stackoverflow.com/a/11475089/1148030
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    // ScalaDoc is kept in -javadoc jars http://www.scala-lang.org/old/node/12471.html
    classifier = 'javadoc'
    from scaladoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives scaladocJar
}

uploadArchives {
    dependsOn(scaladocJar)
    dependsOn(sourcesJar)
    repositories {
        mavenDeployer {
            pom.project {
                name "Pelam's Scala CSV Library"
                description = project.description
                url "https://github.com/pelamfi/pelam-scala-csv/blob/master/readme.md"
                inceptionYear 2015
                scm {
                    connection "scm:git:https://github.com/pelamfi/pelam-scala-csv.git"
                    url "https://github.com/pelamfi/pelam-scala-csv"
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'pelam'
                        name = 'Peter Lamberg'
                    }
                }
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: "pelam", password: sonatypePassword)
            }
            if (Boolean.valueOf(signArtifacts)) {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }
            }
        }
    }
}

tasks.withType(ScalaDoc) {
    title = "Pelam's Scala CSV library"

    scalaDocOptions.additionalParameters = [
            // TODO: convert readme.md to html and feed to scaladoc here? "-doc-root-content", "readme.???",
            "-sourcepath", "${projectDir}/src/main/scala".toString(),
            "-doc-source-url", "https://github.com/pelamfi/pelam-scala-csv/blob/master/src/main/scalaâ‚¬{FILE_PATH}.scala".toString()]
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"

    compile 'org.scala-lang:scala-library:2.13.1'

    testImplementation 'junit:junit:4.12'

    // For Java like enums with small amount of
    // boilerplate https://github.com/lloydmeta/enumeratum
    // Used in tests for row and column typing.
    testImplementation 'com.beachape:enumeratum_2.12:1.5.12'

    // Used for reading resource in tests.
    testImplementation 'com.google.guava:guava:29.0-jre'

    testImplementation 'org.scalatest:scalatest_2.12:3.0.5'
    testImplementation 'org.mockito:mockito-all:1.10.19'
}


idea {
    module {
        excludeDirs += file(".idea")
    }
}
